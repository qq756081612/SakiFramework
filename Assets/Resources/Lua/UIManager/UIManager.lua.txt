require("Lua/UIManager/UIBaseView")
require("Lua/UIManager/UIConfig")

local Debug = CS.UnityEngine.Debug
local GameObject = CS.UnityEngine.GameObject
local Resources = CS.UnityEngine.Resources

UIManager = {}

function UIManager:New(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    self:Init()
    return o
end

function UIManager.GetInstance()
    if UIManager.instance == nil then
        UIManager.instance = UIManager:New()
    end

    return UIManager.instance
end

function UIManager:Dispose()
    for view in pairs(self.showViewDic) do
        view:Destroy()
    end

    for view in pairs(self.hideViewDic) do
        view:Destroy()
    end

    self.showViewDic = nil
    self.hideViewDic = nil
end

function UIManager:Init()
    self.showViewDic = {}
    self.hideViewDic = {}
    self.uiRoot = GameObject.Find("Canvas/UIRoot")
end

--供外部调用的接口
function UIManager:ShowUI(viewName)
    if viewName == nil then
        Debug.LogError("UIManager:ShowUI Error : viewName is nil")
        return
    end

    local view = self.hideViewDic[viewName]
    if view then
        view:ShowView()
        self.hideViewDic[viewName] = nil
        self.showViewDic[viewName] = view
    else
        self:LoadUI(viewName)
    end
end

function UIManager:HideUI(viewName)
    local view = self.showViewDic[viewName]
    if view == nil then
        Debug.LogError("UIManager:HideUI Error : view "..viewName.."is nil")
        return
    end

    view:HideView()
    self.showViewDic[viewName] = nil
    self.hideViewDic[viewName] = view
end

function UIManager:LoadUI(viewName,isShowOnLoaded)
    if viewName == nil then
        Debug.LogError("UIManager:LoadUI Error : viewName is nil")
        return
    end

    isShowOnLoaded = isShowOnLoaded or true

    local uiBaseView = _G[viewName]
    if uiBaseView == nil then
        require(UIConfig.ViewPath[viewName].scriptPath)
        uiBaseView = _G[viewName]
        if uiBaseView == nil then
            Debug.LogError(string.format("UIManager:LoadUI Error : can not find UIBaseView : %s",viewName))
            return
        end
    end

    uiBaseView.viewName = viewName
    --先暂时只做从Resources加载
    local isLoadByResources = true
    if isLoadByResources then
        uiBaseView.view = GameObject.Instantiate(Resources.Load(UIConfig.ViewPath[viewName].prefabPath))
        uiBaseView.view.transform:SetParent(self.uiRoot.transform,false)
        uiBaseView:LoadView()

        if isShowOnLoaded then
            uiBaseView:ShowView()
            self.showViewDic[viewName] = uiBaseView
        else
            self.hideViewDic[viewName] = uiBaseView
        end
    else
        --AssetBundle另外处理
    end
end

return UIManager